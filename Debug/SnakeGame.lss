
AVRASM ver. 2.2.7  D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm Sun May 13 20:59:57 2018

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(17): Including file 'D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\keyboard.asm'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(18): Including file 'D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\screen.asm'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(19): Including file 'D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\utilities.asm'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(20): Including file 'D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\snake.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(8): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.150\avrasm\inc\m328pdef.inc'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(17): Including file 'D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\keyboard.asm'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(18): Including file 'D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\screen.asm'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(19): Including file 'D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\utilities.asm'
D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\main.asm(20): Including file 'D:\ZhaoWen\Documents\Atmel Studio\7.0\uC\uC_code\SnakeGame\snake.asm'
                                 
                                 ; 
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #define _M328PDEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega328P
                                 #pragma AVRPART ADMIN PART_NAME ATmega328P
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x95
                                 .equ	SIGNATURE_002	= 0x0f
                                 
                                 #pragma AVRPART CORE CORE_VERSION V2E
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output CompareA Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output CompareB Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Comparet Ouput Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter1 Control Register C
                                 .equ	FOC1B	= 6	; 
                                 .equ	FOC1A	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 ;.equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register
                                 .equ	ISC00	= 0	; External Interrupt Sense Control 0 Bit 0
                                 .equ	ISC01	= 1	; External Interrupt Sense Control 0 Bit 1
                                 .equ	ISC10	= 2	; External Interrupt Sense Control 1 Bit 0
                                 .equ	ISC11	= 3	; External Interrupt Sense Control 1 Bit 1
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - Clock Prescale Register
                                 .equ	CLKPS0	= 0	; Clock Prescaler Select Bit 0
                                 .equ	CLKPS1	= 1	; Clock Prescaler Select Bit 1
                                 .equ	CLKPS2	= 2	; Clock Prescaler Select Bit 2
                                 .equ	CLKPS3	= 3	; Clock Prescaler Select Bit 3
                                 .equ	CLKPCE	= 7	; Clock Prescaler Change Enable
                                 
                                 ; SPMCSR - Store Program Memory Control and Status Register
                                 .equ    SELFPRGEN = 0; Added for backwards compatibility
                                 .equ	SPMEN	= 0	; Store Program Memory
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read-While-Write section read enable
                                 .equ    SIGRD   = 5 ; Signature Row Read
                                 .equ	RWWSB	= 6	; Read-While-Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; 
                                 .equ	IVSEL	= 1	; 
                                 .equ	PUD	= 4	; 
                                 .equ	BODSE	= 5	; BOD Sleep Enable
                                 .equ	BODS	= 6	; BOD Sleep
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	EXTREF	= EXTRF	; For compatibility
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select Bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select Bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select Bit 2
                                 
                                 ; GPIOR2 - General Purpose I/O Register 2
                                 .equ	GPIOR20	= 0	; 
                                 .equ	GPIOR21	= 1	; 
                                 .equ	GPIOR22	= 2	; 
                                 .equ	GPIOR23	= 3	; 
                                 .equ	GPIOR24	= 4	; 
                                 .equ	GPIOR25	= 5	; 
                                 .equ	GPIOR26	= 6	; 
                                 .equ	GPIOR27	= 7	; 
                                 
                                 ; GPIOR1 - General Purpose I/O Register 1
                                 .equ	GPIOR10	= 0	; 
                                 .equ	GPIOR11	= 1	; 
                                 .equ	GPIOR12	= 2	; 
                                 .equ	GPIOR13	= 3	; 
                                 .equ	GPIOR14	= 4	; 
                                 .equ	GPIOR15	= 5	; 
                                 .equ	GPIOR16	= 6	; 
                                 .equ	GPIOR17	= 7	; 
                                 
                                 ; GPIOR0 - General Purpose I/O Register 0
                                 .equ	GPIOR00	= 0	; 
                                 .equ	GPIOR01	= 1	; 
                                 .equ	GPIOR02	= 2	; 
                                 .equ	GPIOR03	= 3	; 
                                 .equ	GPIOR04	= 4	; 
                                 .equ	GPIOR05	= 5	; 
                                 .equ	GPIOR06	= 6	; 
                                 .equ	GPIOR07	= 7	; 
                                 
                                 ; PRR - Power Reduction Register
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEARH - EEPROM Address Register High Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select reset vector
                                 .equ	BOOTSZ0	= 1	; Select boot size
                                 .equ	BOOTSZ1	= 2	; Select boot size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog Timer Always On
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	DWEN	= 6	; debugWIRE Enable
                                 .equ	RSTDISBL	= 7	; External reset disable
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x3fff	; Note: Word address
                                 .equ	IOEND	= 0x00ff
                                 .equ	SRAM_START	= 0x0100
                                 .equ	SRAM_SIZE	= 2048
                                 .equ	RAMEND	= 0x08ff
                                 .equ	XRAMEND	= 0x0000
                                 .equ	E2END	= 0x03ff
                                 .equ	EEPROMEND	= 0x03ff
                                 .equ	EEADRBITS	= 10
                                 #pragma AVRPART MEMORY PROG_FLASH 32768
                                 #pragma AVRPART MEMORY EEPROM 1024
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 2048
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x3800
                                 .equ	NRWW_STOP_ADDR	= 0x3fff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x37ff
                                 .equ	PAGESIZE	= 64
                                 .equ	FIRSTBOOTSTART	= 0x3f00
                                 .equ	SECONDBOOTSTART	= 0x3e00
                                 .equ	THIRDBOOTSTART	= 0x3c00
                                 .equ	FOURTHBOOTSTART	= 0x3800
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	PCI0addr	= 0x0006	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0008	; Pin Change Interrupt Request 0
                                 .equ	PCI2addr	= 0x000a	; Pin Change Interrupt Request 1
                                 .equ	WDTaddr	= 0x000c	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x000e	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x0010	; Timer/Counter2 Compare Match A
                                 .equ	OVF2addr	= 0x0012	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0014	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0016	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0018	; Timer/Counter1 Compare Match B
                                 .equ	OVF1addr	= 0x001a	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x001c	; TimerCounter0 Compare Match A
                                 .equ	OC0Baddr	= 0x001e	; TimerCounter0 Compare Match B
                                 .equ	OVF0addr	= 0x0020	; Timer/Couner0 Overflow
                                 .equ	SPIaddr	= 0x0022	; SPI Serial Transfer Complete
                                 .equ	URXCaddr	= 0x0024	; USART Rx Complete
                                 .equ	UDREaddr	= 0x0026	; USART, Data Register Empty
                                 .equ	UTXCaddr	= 0x0028	; USART Tx Complete
                                 .equ	ADCCaddr	= 0x002a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x002c	; EEPROM Ready
                                 .equ	ACIaddr	= 0x002e	; Analog Comparator
                                 .equ	TWIaddr	= 0x0030	; Two-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0032	; Store Program Memory Read
                                 
                                 .equ	INT_VECTORS_SIZE	= 52	; size in words
                                 
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; SnakeGame.asm
                                 ;
                                 ; Created: 10-04-18 15:33:49
                                 ; Author : Zhao CHOW
                                 ;
                                 
                                 .INCLUDE "m328pdef.inc"		; Load addresses of (I/O) registers
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega328P.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m328Pdef.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega328P
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega328P
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M328PDEF_INC_
                                 #endif  /* _M328PDEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 .ORG 0x0000
000000 c327                      RJMP init					; First instruction that is executed by the microcontroller
                                 .ORG 0x001A
00001a c32b                      RJMP Timer1InterruptStart	; First instruction executed by the Timer1 Interrupt
                                 .ORG 0x002A
00002a c342                      RJMP ADCInterruptStart		; First instruction executed by the ADC Interrupt
                                 
                                 .INCLUDE "keyboard.asm"
                                 
                                  * keyboard.asm
                                  *
                                  *  Created: 08-04-18 22:38:43
                                  *   Author: Zhao CHOW
                                  */ 
                                 
                                 
                                 ; Keyboard definitions
                                 .EQU NbOfCol = 4			; Define the number of columns of the keyboard to 4
                                 
                                 ; Mapping of the computed button number with the actual displayed number
                                 KeyMapping:
00002b 0807                      .DB    7,		8,		9,	 0x0F, \
00002c 0f09
00002d 0504                      	   4,		5,		6,	 0x0E, \
00002e 0e06
00002f 0201                      	   1,		2,		3,	 0x0D, \
000030 0d03
000031 000a
000032 0c0b                      	0x0A,		0,	 0x0B,	 0x0C
                                 
                                 ; ########################################################################################
                                 ; Get the keyboard column number (rows as outputs, columns as inputs)
                                 ; Input(s): /
                                 ; Output(s): R0 = keyboard column number
                                 GetColNb:
                                 ; Save register(s) to be used on the stack
000033 930f                      PUSH R16
                                 
                                 ; Configure pins
000034 e00f                      LDI R16,0b00001111			; Attention: generate intermediate state
000035 b90b                      OUT PORTD,R16				; Enable pull-up resistor for inputs and set outputs LOW
000036 ef00                      LDI R16,0b11110000
000037 b90a                      OUT DDRD,R16				; Set PD 7 to 4 as outputs, 3 to 0 as inputs
000038 2700                      CLR R16						; (NOP) for synchronisation between assignments and readings
                                 
                                 ; Use R16 as the column number for the keyboard
000039 9b4b                      SBIS PIND,3					; Skip next instruction if PD3 is HIGH (col 1 not pressed)
00003a e001                      	LDI R16,1
00003b 9b4a                      SBIS PIND,2					; Skip next instruction if PD2 is HIGH (col 2 not pressed)
00003c e002                      	LDI R16,2
00003d 9b49                      SBIS PIND,1					; Skip next instruction if PD1 is HIGH (col 3 not pressed)
00003e e003                      	LDI R16,3
00003f 9b48                      SBIS PIND,0					; Skip next instruction if PD0 is HIGH (col 4 not pressed)
000040 e004                      	LDI R16,4
000041 2e00                      MOV R0,R16					; Copy column number to R0
                                 
                                 ; Restore register(s) from the stack (reverse order)
000042 910f                      POP R16
000043 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Get the keyboard column number (columns as outputs, rows as inputs)
                                 ; Input(s): /
                                 ; Output(s): R0 = keyboard row number
                                 GetRowNb:
                                 ; Save register(s) to be used on the stack
000044 930f                      PUSH R16
                                 
                                 ; Configure pins
000045 ef00                      LDI R16,0b11110000			; Attention: generate intermediate state
000046 b90b                      OUT PORTD,R16				; Enable pull-up resistor for inputs and set outputs LOW
000047 e00f                      LDI R16,0b00001111
000048 b90a                      OUT DDRD,R16				; Set PD 7 to 4 as inputs, 3 to 0 as outputs
000049 2700                      CLR R16						; (NOP) for synchronisation between assignments and readings
                                 
                                 ; Use R16 as the row number for the keyboard
00004a 9b4f                      SBIS PIND,7					; Skip next instruction if PD7 is HIGH (row 1 not pressed)
00004b e001                      	LDI R16,1
00004c 9b4e                      SBIS PIND,6					; Skip next instruction if PD6 is HIGH (row 2 not pressed)
00004d e002                      	LDI R16,2
00004e 9b4d                      SBIS PIND,5					; Skip next instruction if PD5 is HIGH (row 3 not pressed)
00004f e003                      	LDI R16,3
000050 9b4c                      SBIS PIND,4					; Skip next instruction if PD4 is HIGH (row 4 not pressed)
000051 e004                      	LDI R16,4
000052 2e00                      MOV R0,R16					; Copy row number to R0
                                 
                                 ; Restore register(s) from the stack (reverse order)
000053 910f                      POP R16
000054 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Return the button number: -1 no button pressed, otherwise value corresponds to the
                                 ; displayed value on the board
                                 ; Input(s): /
                                 ; Output(s): R0 = button number
                                 GetBtnNb:
                                 ; Save register(s) to be used on the stack
000055 930f                      PUSH R16
000056 931f                      PUSH R17
                                 
                                 ; ####################
000057 e000                      LDI R16,0					; Load 0 to R16 for further compare
000058 ef1f                      LDI R17,-1					; Set button number to -1 (no button pressed default value)
                                 
000059 dfd9                      RCALL GetColNb				; Get the keyboard column number (output in R0)
00005a 2c30                      MOV R3,R0					; Copy for later button number computation
00005b 2e01                      MOV R0,R17					; Reset R0 to no button pressed
                                 
00005c 1630                      CP R3,R16
00005d f081                      BREQ GetBtnNbEnd			; If no column pressed, end function
                                 
                                 	; ####################
00005e dfe5                      	RCALL GetRowNb				; Get the keyboard row number (output in R0)
00005f 2c20                      	MOV R2,R0					; Copy for later button number computation
000060 2e01                      	MOV R0,R17					; Reset R0 to no button pressed
                                 
000061 1620                      	CP R2,R16
000062 f059                      	BREQ GetBtnNbEnd			; If no row pressed, end function
                                 
                                 		; ####################
000063 942a                      		DEC R2						; Decrement for button number computation
000064 e004                      		LDI R16,NbOfCol
000065 9e20                      		MUL R2,R16					; Multiply row number by NbOfCol (4) -> result in R1:R0
000066 0c03                      		ADD R0,R3					; Add previous result with column number to R0 (= btn number)
000067 940a                      		DEC R0						; Decrement to get offset in KeyMapping
000068 2000                      		TST R0						; Test if zero or minus (negative)
000069 f022                      		BRMI GetBtnNbEnd			; If minus => End
                                 
00006a e5e6                      			LDI ZL,low(KeyMapping<<1)	; Bit 0 of Z used to select byte (0 = low, 1 = high)
00006b e0f0                      			LDI ZH,high(KeyMapping<<1)
00006c 0de0                      			ADD ZL,R0					; Add offset low byte (only 16 elements so no carry)
00006d 9004                      			LPM R0,Z					; Read a byte
                                 
                                 GetBtnNbEnd:
                                 ; Restore register(s) from the stack (reverse order)
00006e 911f                      POP R17
00006f 910f                      POP R16
                                 .INCLUDE "screen.asm"
000070 9508                      
                                  * screen.asm
                                  *
                                  *  Created: 08-04-18 22:56:19
                                  *   Author: Zhao CHOW
                                  */ 
                                 
                                 ; ########################################################################################
                                 ; Screen initialization
                                 ; Input(s): /
                                 ; Output(s): /
                                 ScreenInit:
                                 ; Save register(s) to be used on the stack
000071 930f                      PUSH R16
000072 922f                      PUSH R2
000073 923f                      PUSH R3
                                 
                                 ; Configure output pins
000074 9a23                      SBI DDRB,3					; Pin PB3 is an output
000075 982b                      CBI PORTB,3					; Initial reset PB3
000076 9a24                      SBI DDRB,4					; Pin PB4 is an output
000077 982c                      CBI PORTB,4					; Initial reset PB4
000078 9a25                      SBI DDRB,5					; Pin PB5 is an output
000079 982d                      CBI PORTB,5					; Initial reset PB5
                                 
                                 ; Load default screen
00007a e10a                      LDI R16,low(StartScreen)
00007b 2e20                      MOV R2,R16					; Input of LoadScreenImage
00007c e001                      LDI R16,high(StartScreen)
00007d 2e30                      MOV R3,R16					; Input of LoadScreenImage
00007e d07e                      RCALL LoadScreenImage
                                 
                                 ; Restore register(s) from the stack (reverse order)
00007f 903f                      POP R3
000080 902f                      POP R2
000081 910f                      POP R16
000082 9508                      RET
                                 
                                 ; ########################################################################################
                                 ; Write R3 column bits for display
                                 ; Input(s): R2 = display byte, R3 = number column bits
                                 ; Output(s): /
                                 WriteBits:
                                 ; Save register(s) to be used on the stack
000083 930f                      PUSH R16
000084 922f                      PUSH R2
                                 
000085 2d03                      MOV R16,R3					; Use R16 as a counter
                                 
                                 WriteBitsLoop:
000086 982b                      	CBI PORTB,3					; Set column bit to LOW (default)
000087 fc20                      	SBRC R2,0					; Set column bit to HIGH according to display byte
000088 9a2b                      	SBI PORTB,3
000089 9a2d                      	SBI PORTB,5					; Shift once at the rising edge of PB5
00008a 982d                      	CBI PORTB,5					; Make PB5 ready for the next rising edge
00008b 9426                      	LSR R2						; Shift right display byte to check next bit
00008c 950a                      	DEC R16						; Decrement counter
00008d f7c1                      BRNE WriteBitsLoop			; Loop back until counter is 0
                                 
                                 ; Restore register(s) from the stack (reverse order)
00008e 902f                      POP R2
00008f 910f                      POP R16
000090 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Display screen according to data in SRAM
                                 ; Input(s): /
                                 ; Output(s): /
                                 Display:
                                 ; Save register(s) to be used on the stack
000091 930f                      PUSH R16
000092 931f                      PUSH R17
000093 932f                      PUSH R18
000094 93cf                      PUSH YL
000095 93df                      PUSH YH
                                 
                                 ; ####################
000096 e021                      LDI R18,1					; Use R18 as a row counter
000097 e0c0                      LDI YL,ScreenL				; Load first address of screen from SRAM
000098 e0d1                      LDI YH,ScreenH
000099 96a8                      ADIW YL,40					; Start at beginning of 2nd row in lower half
                                 
                                 ; ####################
                                 ; Set the 80 column bits
                                 ColBits:
00009a e00a                      	LDI R16,10					; Use R16 as a 10 bytes counter
                                 	ColLoop:
00009b 3005                      		CPI R16,5
00009c f409                      		BRNE Write
00009d 976e                      		SBIW YL,30					; If byte number 5, jump to upper half
                                 
                                 		Write:
00009e 902a                      		LD R2,-Y					; Pre decrement and load byte from SRAM (input of WriteBits)
00009f e018                      		LDI R17,8
0000a0 2e31                      		MOV R3,R17					; Number of column bits to write (input of WriteBits)
0000a1 dfe1                      		RCALL WriteBits
                                 
0000a2 950a                      		DEC R16						; Decrement counter R16
0000a3 f7b9                      	BRNE ColLoop				; Loop back until counter is 0
0000a4 96ad                      	ADIW YL,45					; Jump to next row in lower half
                                 
                                 	; ####################
                                 	; Set the 8 row bits
                                 	RowBits:
0000a5 e008                      	LDI R16,8					; Use R16 as a counter, 8 times
                                 	RowLoop:
0000a6 1702                      		CP R16,R18					; Compare R16 with current row
0000a7 f011                      		BREQ ActiveRow				; If R16 = current row -> activate row
0000a8 982b                      		CBI PORTB,3					; Else set 1 row bit to LOW
0000a9 c002                      		RJMP RowEnd
                                 
                                 		ActiveRow:
0000aa 9a2b                      		SBI PORTB,3					; Set 1 row bit to HIGH
0000ab c000                      		RJMP RowEnd
                                 
                                 		RowEnd:
0000ac 9a2d                      		SBI PORTB,5					; Shift once at the rising edge of PB5
0000ad 982d                      		CBI PORTB,5					; Make PB5 ready for the next rising edge
0000ae 950a                      		DEC R16						; Decrement counter R16
0000af f7b1                      	BRNE RowLoop				; Loop back until counter is 0
                                 
                                 	; ####################
                                 	; Need to wait some time before setting PB4 to have a strong light
0000b0 d08c                      	RCALL Delay
0000b1 d08b                      	RCALL Delay
0000b2 9a2c                      	SBI PORTB,4					; Shift registers latch (for at least 100 us)
0000b3 d089                      	RCALL Delay
0000b4 d088                      	RCALL Delay
0000b5 982c                      	CBI PORTB,4					; Enable the current row
                                 
0000b6 9523                      	INC R18						; Increment row counter
0000b7 ff23                      	SBRS R18,3					; Skip next instruction if current row = 8 (non-existant row)
0000b8 cfe1                      RJMP ColBits				; Repeat until all 7 rows are done
                                 
                                 ; ####################
                                 ; Restore register(s) from the stack (reverse order)
0000b9 91df                      POP YH
0000ba 91cf                      POP YL
0000bb 912f                      POP R18
0000bc 911f                      POP R17
0000bd 910f                      POP R16
0000be 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Set 1 screen bit
                                 ; Input(s): R2 = desired row (0-13), R3 = desired column (0-39)
                                 ; Output(s): /
                                 SetScreenBit:
                                 ; Save register(s) to be used on the stack
0000bf 93cf                      PUSH YL
0000c0 93df                      PUSH YH
                                 
                                 ; R2 & R3 are inputs of GetByteAndMask
0000c1 d01f                      RCALL GetByteAndMask		; Get correct byte (R0), mask (R1) and byte address (Y)
                                 
0000c2 2801                      OR R0,R1					; Set only the correct bit
0000c3 8208                      ST Y,R0						; Store back byte
                                 
                                 ; Restore register(s) from the stack (reverse order)
0000c4 91df                      POP YH
0000c5 91cf                      POP YL
0000c6 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Clear 1 screen bit
                                 ; Input(s): R2 = desired row (0-13), R3 = desired column (0-39)
                                 ; Output(s): /
                                 ClearScreenBit:
                                 ; Save register(s) to be used on the stack
0000c7 930f                      PUSH R16
0000c8 93cf                      PUSH YL
0000c9 93df                      PUSH YH
                                 
                                 ; R2 & R3 are inputs of GetByteAndMask
0000ca d016                      RCALL GetByteAndMask		; Get correct byte (R0), mask (R1) and byte address (Y)
                                 
0000cb ef0f                      LDI R16,0xFF				; Mask for flipping the bits in a byte
0000cc 2610                      EOR R1,R16					; Flip the bits of R1
0000cd 2001                      AND R0,R1					; Clear only the correct bit
0000ce 8208                      ST Y,R0						; Store back byte
                                 
                                 ; Restore register(s) from the stack (reverse order)
0000cf 91df                      POP YH
0000d0 91cf                      POP YL
0000d1 910f                      POP R16
0000d2 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Get 1 screen bit
                                 ; Input(s): R2 = desired row (0-13), R3 = desired column (0-39)
                                 ; Output(s): R0 = desired screen bit
                                 GetScreenBit:
                                 ; Save register(s) to be used on the stack
0000d3 93cf                      PUSH YL
0000d4 93df                      PUSH YH
                                 
                                 ; R2 & R3 are inputs of GetByteAndMask
0000d5 d00b                      RCALL GetByteAndMask		; Get correct byte (R0), mask (R1) and byte address (Y)
                                 
                                 GetScreenBitLoop:
0000d6 fc17                      	SBRC R1,7					; Skip next instruction if bit 7 cleared
0000d7 c003                      	RJMP GetScreenBitEnd		; Desired bit at bit 7 -> next part
0000d8 0c00                      	LSL R0
0000d9 0c11                      	LSL R1
0000da cffb                      RJMP GetScreenBitLoop		; Shift left until desired bit at bit 7
                                 
                                 GetScreenBitEnd:
0000db fa07                      BST R0,7					; Store bit 7 of R0 in T
0000dc 2400                      CLR R0						; Clear R0
0000dd f800                      BLD R0,0					; Load T in bit 0 of R0
                                 
                                 ; Restore register(s) from the stack (reverse order)
0000de 91df                      POP YH
0000df 91cf                      POP YL
0000e0 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Return the screen byte containing the desired bit and the mask for retrieving it with
                                 ; the AND operator
                                 ; !!! SENSITIVE TO Y
                                 ; Input(s): R2 = desired row (0-13), R3 = desired column (0-39)
                                 ; Output(s): R0 = desired byte, R1 = mask, Y = corresponding byte address
                                 GetByteAndMask:
                                 ; Save register(s) to be used on the stack
0000e1 930f                      PUSH R16
0000e2 922f                      PUSH R2						; Save input for restore
0000e3 923f                      PUSH R3 					; Save input for restore
                                 
0000e4 e0c0                      LDI YL,ScreenL				; Load 1st address of screen in SRAM
0000e5 e0d1                      LDI YH,ScreenH
                                 
                                 ; ####################
                                 ; Go to the correct row
                                 GetByteAndMaskRow:
0000e6 2022                      	TST R2						; Test if R2 = 0
0000e7 f019                      	BREQ GetByteAndMaskP2		; If correct row, go to next part
0000e8 9625                      	ADIW Y,5					; Else go to next row (5 bytes = 40 bits)
0000e9 942a                      	DEC R2
0000ea cffb                      RJMP GetByteAndMaskRow		; Loop until correct row
                                 
                                 ; ####################
                                 ; Go to the correct byte containing the desired column (Decrease until column < 8)
                                 GetByteAndMaskP2:
0000eb e008                      LDI R16,8					; Use as decrement
                                 GetByteAndMaskCol:
0000ec 1630                      	CP R3,R16
0000ed f018                      	BRLO GetByteAndMaskP3		; If column < 8, go to next part
0000ee 1a30                      	SUB R3,R16					; Else decrease of 8
0000ef 9621                      	ADIW Y,1					; Increment address byte
0000f0 cffb                      RJMP GetByteAndMaskCol		; Loop until correct byte
                                 
                                 ; Get mask for column bit
                                 GetByteAndMaskP3:
0000f1 e800                      LDI R16,0b10000000			; Mask for selecting correct column bit
                                 GetByteAndMaskColMask:
0000f2 2033                      	TST R3						; Test if R3 = 0
0000f3 f019                      	BREQ GetByteAndMaskEnd		; If correct column bit -> End
0000f4 9506                      	LSR R16						; Else shift right mask
0000f5 943a                      	DEC R3						; Decrement R3
0000f6 cffb                      RJMP GetByteAndMaskColMask	; Loop until correct column bit
                                 
                                 GetByteAndMaskEnd:
0000f7 8008                      LD R0,Y						; Load screen byte
0000f8 2e10                      MOV R1,R16					; Copy mask to R1
                                 ; Restore register(s) from the stack (reverse order)
0000f9 903f                      POP R3
0000fa 902f                      POP R2
0000fb 910f                      POP R16
0000fc 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Load image in Program memory to display
                                 ; Input(s): R2 = low address byte of image, R3 = high address byte of image
                                 ; Output(s): /
                                 LoadScreenImage:
                                 ; Save register(s) to be used on the stack
0000fd 930f                      PUSH R16
0000fe 931f                      PUSH R17
0000ff 922f                      PUSH R2						; Save input for restore
000100 923f                      PUSH R3 					; Save input for restore
000101 93cf                      PUSH YL
000102 93df                      PUSH YH
000103 93ef                      PUSH ZL
000104 93ff                      PUSH ZH
                                 
000105 e0c0                      LDI YL,ScreenL				; Load screen address in SRAM
000106 e0d1                      LDI YH,ScreenH
                                 
000107 9488                      CLC							; Make sure carry is cleared for next instruction
000108 1c22                      ROL R2						; Shift left low byte with old bit 7 in carry
000109 1c33                      ROL R3						; Shift left high byte with new bit 0 from carry
00010a 2de2                      MOV ZL,R2					; Bit 0 of Z used to select byte (0 = low, 1 = high)
00010b 2df3                      MOV ZH,R3
00010c e406                      LDI R16,ScreenLength
                                 
                                 LoadScreenImageLoop:
00010d 9115                      	LPM R17,Z+					; Read 1 byte from image in Program memory
00010e 9319                      	ST Y+,R17					; Store the byte to SRAM
00010f 950a                      	DEC R16
000110 f7e1                      BRNE LoadScreenImageLoop	; Loop until all bytes are written
                                 
                                 ; Restore register(s) from the stack (reverse order)
000111 91ff                      POP ZH
000112 91ef                      POP ZL
000113 91df                      POP YH
000114 91cf                      POP YL
000115 903f                      POP R3
000116 902f                      POP R2
000117 911f                      POP R17
000118 910f                      POP R16
000119 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 
                                 .EQU ScreenL = 0x00			; Start of StartScreen in SRAM
                                 .EQU ScreenH = 0x01
                                 .EQU ScreenLength = 70		; Number of bytes of the screen
                                 
                                 StartScreen:
                                 ;     1    2        3    4        5        6    7        8
00011a 0000
00011b 0000                      .DB 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
00011c 0000
00011d 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
00011e 0000
00011f 0000
000120 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
000121 0000
000122 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
000123 0000
000124 0000
000125 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
000126 0000
000127 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
000128 0000
000129 0000
00012a 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
                                 																\
00012b 0000
00012c 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
00012d 0000
00012e 0000
00012f 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
000130 0000
000131 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
000132 0000
000133 0000
000134 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
000135 0000
000136 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
000137 0000
000138 0000
000139 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
00013a 0000
00013b 0000                      .INCLUDE "utilities.asm"
00013c 0000                      
                                  * utilities.asm
                                  *
                                  *  Created: 08-04-18 18:54:35
                                  *   Author: Zhao CHOW
                                  */ 
                                 
                                 ; Use following registers for the pseudo-random generator
                                 .DEF RandomSeed = R10
                                 .DEF RandomSeed2 = R11
                                 .DEF RandomSeed3 = R12
                                 .DEF RandomSeed4 = R13
                                 .DEF RandomSeed5 = R14
                                 .DEF RandomSeed6 = R15
                                 
                                 ; ########################################################################################
                                 ; Delay subroutine
                                 Delay:
                                 ; Save register(s) to be used on the stack
00013d 930f                      PUSH R16
                                 
00013e ef0f                      LDI R16,0xFF				; Set R16 as a counter
                                 DelayLoop:
00013f 950a                      	DEC R16						; Decrement counter
000140 f7f1                      BRNE DelayLoop				; Loop until counter is 0
                                 
                                 ; Restore register(s) from the stack (reverse order)
000141 910f                      POP R16
000142 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Generate pseudo-random bits using linear feedback shift registers (n = 47, k = 47,42).
                                 ; Input(s): R2 = nb bits (1-31)
                                 ; Output(s): R0 = random bits
                                 RandBits:
                                 ; Save register(s) to be used on the stack
000143 930f                      PUSH R16
000144 931f                      PUSH R17
                                 
000145 e000                      LDI R16,0
000146 2e00                      MOV R0,R16					; Reset R0
000147 faa0                      BST RandomSeed,0			; Save k = 1 in T
000148 f800                      BLD R0,0					; Copy T to bit 0 output byte
                                 
                                 RandBitsLoop:
000149 942a                      	DEC R2
00014a f071                      	BREQ RandBitsEnd			; Finish if R2 = 0
                                 	; Right shift registers
00014b 94f6                      	LSR RandomSeed6
00014c 94e7                      	ROR RandomSeed5
00014d 94d7                      	ROR RandomSeed4
00014e 94c7                      	ROR RandomSeed3
00014f 94b7                      	ROR RandomSeed2
000150 94a7                      	ROR RandomSeed
                                 
000151 f8f6                      	BLD RandomSeed6,6			; Copy T to k = 47
000152 e010                      	LDI R17,0					; Reset R17
000153 f911                      	BLD R17,1					; Copy T to bit 1 of R17
000154 26f1                      	EOR RandomSeed6,R17			; XOR k = 42
                                 
000155 faa0                      	BST RandomSeed,0			; Save k = 1 in T
000156 0c00                      	LSL R0						; Left shift output byte
000157 f800                      	BLD R0,0					; Copy T to bit 0 output byte
000158 cff0                      RJMP RandBitsLoop
                                 
                                 RandBitsEnd:
                                 ; Restore register(s) from the stack (reverse order)
000159 911f                      POP R17
00015a 910f                      POP R16
00015b 9508                      RET
                                 
                                 ; ########################################################################################
                                 ; Return a random row of the display (between 0 and 13)
                                 ; Input(s): /
                                 ; Output(s): R0 = random row (0-13)
                                 RandRow:
                                 ; Save register(s) to be used on the stack
00015c 930f                      PUSH R16
00015d 922f                      PUSH R2						; Make sure R2 is not changed due to this function
                                 
00015e e004                      LDI R16,4
00015f 2e20                      MOV R2,R16					; Input of RandBits
000160 dfe2                      RCALL RandBits				; Get R2 random bits in R0
000161 2d00                      MOV R16,R0					; Copy bits to R16
000162 300e                      CPI R16,14
000163 f010                      BRLO RandRowEnd				; If < 14 => End
000164 5008                      SUBI R16,8					; Else decrease of 8
000165 2e00                      MOV R0,R16					; Copy to output R0
                                 
                                 RandRowEnd:
                                 ; Restore register(s) from the stack (reverse order)
000166 902f                      POP R2
000167 910f                      POP R16
000168 9508                      RET
                                 
                                 ; ########################################################################################
                                 ; Return a random column of the display (between 0 and 39)
                                 ; Input(s): /
                                 ; Output(s): R0 = random column (0-39)
                                 RandCol:
                                 ; Save register(s) to be used on the stack
000169 930f                      PUSH R16
00016a 922f                      PUSH R2 					; Make sure R2 is not changed due to this function
                                 
00016b e006                      LDI R16,6
00016c 2e20                      MOV R2,R16					; Input of RandBits
00016d dfd5                      RCALL RandBits				; Get R2 random bits in R0
00016e 2d00                      MOV R16,R0					; Copy bits to R16
00016f 3208                      CPI R16,40
000170 f010                      BRLO RandColEnd				; If < 40 => End
000171 5200                      SUBI R16,32					; Else decrease of 32
000172 2e00                      MOV R0,R16					; Copy to output R0
                                 
                                 RandColEnd:
                                 ; Restore register(s) from the stack (reverse order)
000173 902f                      POP R2
000174 910f                      POP R16
                                 .INCLUDE "snake.asm"
000175 9508                      
                                  * snake.asm
                                  *
                                  *  Created: 23/04/2018 14:06:36
                                  *   Author: Zhao CHOW
                                  */ 
                                 
                                 .EQU UP = 1
                                 .EQU DOWN = 2
                                 .EQU LEFT = 3
                                 .EQU RIGHT = 4
                                 .DEF SnakeDirection = R24	; Use R24 for the snake direction
                                 .DEF SnakeStop = R25		; Use R25 for the game stop status
                                 
                                 .EQU FoodL = 0x00			; SRAM address for food, 2 byte food 2 bytes timer counter
                                 .EQU FoodH = 0x03
                                 .EQU SnakeTimerCntH = 0x85
                                 .EQU SnakeTimerCntL = 0xEE
                                 
                                 ; ########################################################################################
                                 ; Snake initialization
                                 ; Input(s): /
                                 ; Output(s): /
                                 SnakeInit:
                                 ; Save register(s) to be used on the stack
000176 930f                      PUSH R16
000177 93ef                      PUSH ZL
000178 93ff                      PUSH ZH
000179 93cf                      PUSH YL
00017a 93df                      PUSH YH
                                 
                                 ; Load snake game start
00017b ee02                      LDI R16,low(SnakeGameStart)
00017c 2e20                      MOV R2,R16					; Copy low byte of start screen (input of LoadScreenImage)
00017d e002                      LDI R16,high(SnakeGameStart)
00017e 2e30                      MOV R3,R16					; Copy high byte of start screen (input of LoadScreenImage)
00017f df7d                      RCALL LoadScreenImage		; Load game start screen
                                 
000180 e091                      LDI SnakeStop,1				; Set stop status to 1 (True)
                                 
                                 ; Restore register(s) from the stack (reverse order)
000181 91df                      POP YH
000182 91cf                      POP YL
000183 91ff                      POP ZH
000184 91ef                      POP ZL
000185 910f                      POP R16
000186 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Start snake game
                                 ; Input(s): /
                                 ; Output(s): /
                                 SnakeStartGame:
                                 ; Save register(s) to be used on the stack
000187 930f                      PUSH R16
000188 93ef                      PUSH ZL
000189 93ff                      PUSH ZH
00018a 93cf                      PUSH YL
00018b 93df                      PUSH YH
                                 
00018c dee4                      RCALL ScreenInit			; Reset screen to default
                                 
                                 ; ####################
00018d e0c0                      LDI YL,SnakeL				; Load address of snake in SRAM
00018e e0d2                      LDI YH,SnakeH
00018f e2ee                      LDI ZL,low(SnakeStart<<1)	; Bit 0 of Z used to select byte (0 = low, 1 = high)
000190 e0f5                      LDI ZH,high(SnakeStart<<1)
                                 
000191 9105                      LPM R16,Z+					; Load snake length
000192 9309                      ST Y+,R16					; Store snake length in SRAM
                                 ; Store every point of snake
                                 SnakeStartLoop:
000193 9025                      	LPM R2,Z+					; Read row byte and post increment
000194 9229                      	ST Y+,R2					; Store row byte in SRAM
000195 9035                      	LPM R3,Z+					; Read column byte and post increment
000196 9239                      	ST Y+,R3					; Store column byte
000197 950a                      	DEC R16
000198 f7d1                      BRNE SnakeStartLoop			; Loop for all the snake's points
                                 
000199 9918                      SBIC PINB,0					; If PB0 (switch) is cleared, skip next intruction
00019a c005                      RJMP SnakeStartP22			; Else go to next sub part
                                 
                                 ; Load snake game without walls (switch low)
00019b e90c                      LDI R16,low(SnakeNoWalls)
00019c 2e20                      MOV R2,R16					; Copy low byte of start screen (input of LoadScreenImage)
00019d e002                      LDI R16,high(SnakeNoWalls)
00019e 2e30                      MOV R3,R16					; Copy high byte of start screen (input of LoadScreenImage)
00019f c004                      RJMP SnakeStartP23			; Go to next part
                                 
                                 ; Load snake game with walls (switch high)
                                 SnakeStartP22:
0001a0 eb0f                      LDI R16,low(SnakeWalls)
0001a1 2e20                      MOV R2,R16					; Copy low byte of start screen (input of LoadScreenImage)
0001a2 e002                      LDI R16,high(SnakeWalls)
0001a3 2e30                      MOV R3,R16					; Copy high byte of start screen (input of LoadScreenImage)
                                 
                                 SnakeStartP23:
0001a4 df58                      RCALL LoadScreenImage		; Load game start screen
                                 
0001a5 e084                      LDI SnakeDirection,RIGHT	; Set default snake direction to RIGHT
0001a6 e090                      LDI SnakeStop,0				; Set stop status to 0 (False)
                                 
0001a7 b4a6                      IN RandomSeed,TCNT0			; Get the first random seed for the pseudo-random generator
                                 
0001a8 d0d9                      RCALL SnakeGenFood			; Generate food
0001a9 e0c0                      LDI YL,FoodL				; Load address of food in SRAM
0001aa e0d3                      LDI YH,FoodH
0001ab e805                      LDI R16,SnakeTimerCntH		; Store Timer1 counter
0001ac 830a                      STD Y+2,R16
0001ad ee0e                      LDI R16,SnakeTimerCntL
0001ae 830b                      STD Y+3,R16
                                 
                                 ; ####################
                                 ; Restore register(s) from the stack (reverse order)
0001af 91df                      POP YH
0001b0 91cf                      POP YL
0001b1 91ff                      POP ZH
0001b2 91ef                      POP ZL
0001b3 910f                      POP R16
0001b4 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Move the snake 1 bit UP
                                 ; Input(s): /
                                 ; Output(s): /
                                 SnakeMoveUp:
                                 ; Save register(s) to be used on the stack
0001b5 930f                      PUSH R16
                                 
0001b6 d02c                      RCALL GetSnakeHead			; Get snake head, R0 = row, R1 = column
0001b7 2d00                      MOV R16,R0					; Copy row to R16
                                 
0001b8 950a                      DEC R16						; Decrement row
0001b9 f40c                      BRGE SnakeMoveUpP2			; If row >= 0, go to next part
0001ba e00d                      	LDI R16,13					; Else row = 13
                                 
                                 SnakeMoveUpP2:
0001bb 2e20                      MOV R2,R16					; Copy new row to R2 (input of SnakeUpdate)
0001bc 2c31                      MOV R3,R1					; Copy column to R3 (input of SnakeUpdate)
0001bd d035                      RCALL SnakeUpdate			; Update the snake
                                 
                                 ; ####################
                                 ; Restore register(s) from the stack (reverse order)
0001be 910f                      POP R16
0001bf 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Move the snake 1 bit DOWN
                                 ; Input(s): /
                                 ; Output(s): /
                                 SnakeMoveDown:
                                 ; Save register(s) to be used on the stack
0001c0 930f                      PUSH R16
                                 
0001c1 d021                      RCALL GetSnakeHead			; Get snake head, R0 = row, R1 = column
0001c2 2d00                      MOV R16,R0					; Copy row to R16
                                 
0001c3 9503                      INC R16						; Increment row
0001c4 300e                      CPI R16,14
0001c5 f008                      BRLO SnakeMoveDownP2		; If row < 14, go to next part
0001c6 e000                      	LDI R16,0					; Else row = 0
                                 
                                 SnakeMoveDownP2:
0001c7 2e20                      MOV R2,R16					; Copy new row to R2 (input of SnakeUpdate)
0001c8 2c31                      MOV R3,R1					; Copy column to R3 (input of SnakeUpdate)
0001c9 d029                      RCALL SnakeUpdate			; Update the snake
                                 
                                 ; ####################
                                 ; Restore register(s) from the stack (reverse order)
0001ca 910f                      POP R16
0001cb 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Move the snake 1 bit LEFT
                                 ; Input(s): /
                                 ; Output(s): /
                                 SnakeMoveLeft:
                                 ; Save register(s) to be used on the stack
0001cc 930f                      PUSH R16
                                 
0001cd d015                      RCALL GetSnakeHead			; Get snake head, R0 = row, R1 = column
0001ce 2d01                      MOV R16,R1					; Copy column to R16
                                 
0001cf 950a                      DEC R16						; Decrement column
0001d0 f40c                      BRGE SnakeMoveLeftP2		; If column >= 0, go to next part
0001d1 e207                      	LDI R16,39					; Else column = 39
                                 
                                 SnakeMoveLeftP2:
0001d2 2c20                      MOV R2,R0					; Copy row to R2 (input of SnakeUpdate)
0001d3 2e30                      MOV R3,R16					; Copy new column to R3 (input of SnakeUpdate)
0001d4 d01e                      RCALL SnakeUpdate			; Update the snake
                                 
                                 ; ####################
                                 ; Restore register(s) from the stack (reverse order)
0001d5 910f                      POP R16
0001d6 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Move the snake 1 bit RIGHT
                                 ; Input(s): /
                                 ; Output(s): /
                                 SnakeMoveRight:
                                 ; Save register(s) to be used on the stack
0001d7 930f                      PUSH R16
                                 
0001d8 d00a                      RCALL GetSnakeHead			; Get snake head, R0 = row, R1 = column
0001d9 2d01                      MOV R16,R1					; Copy column to R16
                                 
0001da 9503                      INC R16						; Increment column
0001db 3208                      CPI R16,40
0001dc f008                      BRLO SMRUpdate				; If column < 40, go to next part
0001dd e000                      	LDI R16,0					; Else column = 0
                                 
                                 SMRUpdate:
0001de 2c20                      MOV R2,R0					; Copy row to R2 (input of SnakeUpdate)
0001df 2e30                      MOV R3,R16					; Copy new column to R3 (input of SnakeUpdate)
0001e0 d012                      RCALL SnakeUpdate			; Update the snake
                                 
                                 ; ####################
                                 ; Restore register(s) from the stack (reverse order)
0001e1 910f                      POP R16
0001e2 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Get the row and column of the snake head
                                 ; Input(s): /
                                 ; Output(s): R0 = row of head, R1 = column of head
                                 GetSnakeHead:
                                 ; Save register(s) to be used on the stack
0001e3 930f                      PUSH R16
0001e4 93cf                      PUSH YL
0001e5 93df                      PUSH YH
                                 
0001e6 e0c0                      LDI YL,SnakeL				; Load address of snake in SRAM
0001e7 e0d2                      LDI YH,SnakeH
                                 
0001e8 9109                      LD R16,Y+					; Load snake length
0001e9 950a                      DEC R16						; Do not take the head itself
                                 GetSnakeHeadLoop:
0001ea 9622                      	ADIW Y,2					; Increase of 2
0001eb 950a                      	DEC R16
0001ec f7e9                      BRNE GetSnakeHeadLoop		; Loop until at head
                                 
0001ed 9009                      LD R0,Y+					; Get row of snake head
0001ee 8018                      LD R1,Y						; Get column snake head
                                 
                                 ; ####################
                                 ; Restore register(s) from the stack (reverse order)
0001ef 91df                      POP YH
0001f0 91cf                      POP YL
0001f1 910f                      POP R16
0001f2 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Update the snake (increase the length if encounter with food, trigger stop status if
                                 ; encounter with itself, otherwise update position)
                                 ; Input(s): R2 = new head row, R3 new head col
                                 ; Output(s): /
                                 SnakeUpdate:
                                 ; Save register(s) to be used on the stack
0001f3 930f                      PUSH R16
0001f4 931f                      PUSH R17
0001f5 932f                      PUSH R18
0001f6 93cf                      PUSH YL
0001f7 93df                      PUSH YH
                                 
                                 ; ####################
                                 ; Increase length if encounter with food
0001f8 e0c0                      LDI YL,FoodL				; Get food position (row and column)
0001f9 e0d3                      LDI YH,FoodH
0001fa 9109                      LD R16,Y+					; Food row
0001fb 8118                      LD R17,Y					; Food column
                                 
                                 ; Check if new head = food, if not go to next part
0001fc 1620                      CP R2,R16
0001fd f4c9                      BRNE SnakeUpdateP2			; Check row
0001fe 1631                      CP R3,R17
0001ff f4b9                      BRNE SnakeUpdateP2			; Check column
                                 
                                 	; New head = food so increase snake length
000200 e0c0                      	LDI YL,SnakeL				; Load address of snake
000201 e0d2                      	LDI YH,SnakeH
000202 8108                      	LD R16,Y					; Load snake length
000203 9503                      	INC R16						; Increase snake length
000204 9309                      	ST Y+,R16					; Store back snake length
                                 
000205 950a                      	DEC R16						; Do not take the head itself
                                 	SnakeUpdateP11:				; Go to new head
000206 9622                      		ADIW Y,2					; Increase of 2
000207 950a                      		DEC R16
000208 f7e9                      	BRNE SnakeUpdateP11			; Loop until at head
000209 9229                      	ST Y+,R2					; Add new head
00020a 9239                      	ST Y+,R3
                                 
00020b d076                      	RCALL SnakeGenFood			; Generate new food
00020c e0c0                      	LDI YL,FoodL				; Load address of food in SRAM
00020d e0d3                      	LDI YH,FoodH
00020e 810a                      	LDD R16,Y+2					; Load Timer1 Counter High Byte
00020f 3b02                      	CPI R16,0xB2
000210 f414                      	BRGE SnakeUpdateP12			; After 9 times increasing by 5, increment by 1
000211 e025                      	LDI R18,5					; Increase Timer1 Counter by 5
000212 c001                      	RJMP SnakeUpdateP13
                                 
                                 	SnakeUpdateP12:
000213 e021                      	LDI R18,1					; Increase Timer1 Counter by 1
                                 
                                 	SnakeUpdateP13:
000214 0f02                      	ADD R16,R18
000215 830a                      	STD Y+2,R16					; Store back Timer1 Counter High Byte
000216 c01e                      	RJMP SnakeUpdateEnd			; Finish update
                                 
                                 ; ####################
                                 ; Trigger stop status if encounter with itself or obstacle
                                 SnakeUpdateP2:
                                 ; R2 & R3 are inputs of GetScreenBit
000217 debb                      RCALL GetScreenBit			; Get screen bit at new head position (R0 = 0 or 1)
000218 2000                      TST R0
000219 f039                      BREQ SnakeUpdateP3			; If bit = 0 (nothing at new head position), go to next part
00021a e091                      	LDI SnakeStop,1				; Else set stop status
00021b e005                      	LDI R16,low(SnakeGameOver)	; Set Game Over screen
00021c 2e20                      	MOV R2,R16					; Input of LoadScreenImage
00021d e003                      	LDI R16,high(SnakeGameOver)
00021e 2e30                      	MOV R3,R16					; Input of LoadScreenImage
00021f dedd                      	RCALL LoadScreenImage
000220 c014                      	RJMP SnakeUpdateEnd			; Finish update
                                 
                                 ; ####################
                                 ; Update position
                                 SnakeUpdateP3:
000221 e0c0                      LDI YL,SnakeL				; Load address of snake
000222 e0d2                      LDI YH,SnakeH
                                 
000223 2d02                      MOV R16,R2					; Copy new head row
000224 2d13                      MOV R17,R3					; Copy new head column
000225 8029                      LDD R2,Y+1					; Load row of snake tail (input of ClearScreenBit)
000226 803a                      LDD R3,Y+2					; Load column of snake tail (input of ClearScreenBit)
000227 de9f                      RCALL ClearScreenBit		; Clear snake tail
000228 2e20                      MOV R2,R16					; Copy back new head row
000229 2e31                      MOV R3,R17					; Copy back new head column
                                 
00022a 9109                      LD R16,Y+					; Load snake length
00022b 950a                      DEC R16						; Do not take the head itself
                                 
                                 ; Shift all snake points
                                 SnakeUpdateP31:
00022c 811a                      	LDD R17,Y+2					; Load row of next snake point
00022d 9319                      	ST Y+,R17					; Store to previous snake point
00022e 811a                      	LDD R17,Y+2					; Load column of next snake point
00022f 9319                      	ST Y+,R17					; Store to previous snake point
000230 950a                      	DEC R16
000231 f7d1                      BRNE SnakeUpdateP31			; Loop for all snake points
                                 
000232 9229                      ST Y+,R2					; Store new head
000233 8238                      ST Y,R3
000234 de8a                      RCALL SetScreenBit			; Set the screen bit for the new head
                                 
                                 ; ####################
                                 SnakeUpdateEnd:
                                 ; Restore register(s) from the stack (reverse order)
000235 91df                      POP YH
000236 91cf                      POP YL
000237 912f                      POP R18
000238 911f                      POP R17
000239 910f                      POP R16
00023a 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Main function of this snake game. Move the snake continuously and change its direction
                                 ; according to the pressed button. Stop the game when the snake encounters itself.
                                 ; Input(s): R2 = button number
                                 ; Output(s): /
                                 SnakeMain:
                                 ; Save register(s) to be used on the stack
00023b 930f                      PUSH R16
00023c 931f                      PUSH R17
00023d 922f                      PUSH R2						; Save input for restore
00023e 93cf                      PUSH YL
00023f 93df                      PUSH YH
                                 
000240 2d02                      MOV R16,R2					; Copy button number to R16
                                 
                                 ; ####################
                                 ; Check if game has stopped
000241 2399                      TST SnakeStop
000242 f021                      BREQ SnakeDirectionUp		; If game is not stopped, go to next part
000243 300a                      	CPI R16,0x0A				; Else check if user want to retry
000244 f5b9                      	BRNE SnakeMainEnd			; If user do no want to retry, end function
000245 df41                      		RCALL SnakeStartGame		; Else start snake game
000246 c035                      		RJMP SnakeMainEnd			; End function
                                 
                                 ; ####################
                                 ; Change direction if button pressed (cannot go in opposite direction as currently)
                                 SnakeDirectionUp:
000247 3003                      CPI R16,0x03
000248 f011                      BREQ SnakeMainP21			; If button 3 (go UP) is pressed, go to sub part
000249 334f                      CPI JoystickUD,0x3F
00024a f420                      BRSH SnakeDirectionDown		; If JoystickUD >= 63, Joystick not up
                                 SnakeMainP21:
00024b 3082                      CPI SnakeDirection,DOWN
00024c f0c9                      BREQ SnakeGoUp				; If previously going DOWN, go to next part
00024d e081                      	LDI SnakeDirection,UP		; Else change direction to UP
00024e c017                      	RJMP SnakeGoUp				; Go to next part
                                 
                                 SnakeDirectionDown:
00024f 300b                      CPI R16,0x0B
000250 f011                      BREQ SnakeMainP22			; If button B (go DOWN) is pressed, go to sub part
000251 3c40                      CPI JoystickUD,0xC0
000252 f020                      BRLO SnakeDirectionLeft		; Else if JoystickUD < 192, Joystick not down
                                 SnakeMainP22:
000253 3081                      CPI SnakeDirection,UP
000254 f089                      BREQ SnakeGoUp				; If previously going UP, go to next part
000255 e082                      	LDI SnakeDirection,DOWN		; Else change direction to DOWN
000256 c00f                      	RJMP SnakeGoUp				; Go to next part
                                 
                                 SnakeDirectionLeft:
000257 3000                      CPI R16,0x00
000258 f011                      BREQ SnakeMainP23			; If button 0 (go LEFT) is pressed, go to sub part
000259 335f                      CPI JoystickLR,0x3F
00025a f420                      BRSH SnakeDirectionRight	; Else if JoystickUD >= 63, Joystick not left
                                 SnakeMainP23:
00025b 3084                      CPI SnakeDirection,RIGHT
00025c f049                      BREQ SnakeGoUp				; If previously going RIGHT, go to next part
00025d e083                      	LDI SnakeDirection,LEFT		; Else change direction to LEFT
00025e c007                      	RJMP SnakeGoUp				; Go to next part
                                 
                                 SnakeDirectionRight:
00025f 300c                      CPI R16,0x0C
000260 f011                      BREQ SnakeMainP24			; If button C (go RIGHT) is pressed, go to sub part
000261 3c50                      CPI JoystickLR,0xC0
000262 f018                      BRLO SnakeGoUp				; Else if JoystickUD < 192, Joystick not right
                                 SnakeMainP24:
000263 3083                      CPI SnakeDirection,LEFT
000264 f009                      BREQ SnakeGoUp				; If previously going LEFT, go to next part
000265 e084                      	LDI SnakeDirection,RIGHT	; Else change direction to RIGHT
                                 
                                 ; ####################
                                 ; Move snake according to direction
                                 SnakeGoUp:
000266 3081                      CPI SnakeDirection,UP
000267 f411                      BRNE SnakeGoDown			; If direction is not UP, go to next direction
000268 df4c                      	RCALL SnakeMoveUp			; Else move snake UP
000269 c00b                      	RJMP SnakeMainP4			; Go to next part
                                 
                                 SnakeGoDown:
00026a 3082                      CPI SnakeDirection,DOWN
00026b f411                      BRNE SnakeGoLeft			; If direction is not DOWN, go to next direction
00026c df53                      	RCALL SnakeMoveDown			; Else move snake DOWN
00026d c007                      	RJMP SnakeMainP4			; Go to next part
                                 
                                 SnakeGoLeft:
00026e 3083                      CPI SnakeDirection,LEFT
00026f f411                      BRNE SnakeGoRight			; If direction is not LEFT, go to next direction
000270 df5b                      	RCALL SnakeMoveLeft			; Else move snake LEFT
000271 c003                      	RJMP SnakeMainP4			; Go to next part
                                 
                                 SnakeGoRight:
000272 3084                      CPI SnakeDirection,RIGHT
000273 f409                      BRNE SnakeMainP4			; If direction is not RIGHT, go to next part
000274 df62                      	RCALL SnakeMoveRight		; Else move snake RIGHT
                                 
                                 ; ####################
                                 ; Refresh food bit for display if game continues
                                 SnakeMainP4:
000275 2399                      TST SnakeStop
000276 f429                      BRNE SnakeMainEnd			; If game is stopped, end function
000277 e0c0                      	LDI YL,FoodL				; Get food position (row and column)
000278 e0d3                      	LDI YH,FoodH
000279 9029                      	LD R2,Y+					; Food row (input of SetScreenBit)
00027a 8038                      	LD R3,Y						; Food column (input of SetScreenBit)
00027b de43                      	RCALL SetScreenBit			; Set food bit for display
                                 
                                 ; ####################
                                 SnakeMainEnd:
                                 ; Restore register(s) from the stack (reverse order)
00027c 91df                      POP YH
00027d 91cf                      POP YL
00027e 902f                      POP R2
00027f 911f                      POP R17
000280 910f                      POP R16
000281 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Generate a new food at a random position
                                 ; Input(s): /
                                 ; Output(s): /
                                 SnakeGenFood:
                                 ; Save register(s) to be used on the stack
000282 922f                      PUSH R2						; Make sure R2 is not changed due to this function
000283 923f                      PUSH R3						; Make sure R3 is not changed due to this function
000284 93cf                      PUSH YL
000285 93df                      PUSH YH
                                 
000286 e0c0                      LDI YL,FoodL				; Load address of food in SRAM
000287 e0d3                      LDI YH,FoodH
                                 
                                 SnakeGenFoodP1:
000288 ded3                      	RCALL RandRow				; Get a random row 0-13 in R0
000289 2c20                      	MOV R2,R0					; Copy row to R2 (input of GetScreenBit)
00028a dede                      	RCALL RandCol				; Get a random column 0-39 in R0
00028b 2c30                      	MOV R3,R0					; Copy column to R3 (input of GetScreenBit)
                                 
                                 	; R2 & R3 are inputs of GetScreenBit
00028c de46                      	RCALL GetScreenBit			; Get screen bit at new food position (R0 = 0 or 1)
00028d 2000                      	TST R0
00028e f7c9                      BRNE SnakeGenFoodP1			; If bit = 1 (something at new food position), generate again
                                 
                                 ; R2 & R3 are inputs of SetScreenBit
00028f 9229                      ST Y+,R2					; Store row in SRAM
000290 8238                      ST Y,R3						; Store column in SRAM
000291 de2d                      RCALL SetScreenBit			; Set the corresponding screen bit
                                 
                                 ; ####################
                                 ; Restore register(s) from the stack (reverse order)
000292 91df                      POP YH
000293 91cf                      POP YL
000294 903f                      POP R3
000295 902f                      POP R2
000296 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 
                                 ; SRAM address of snake (contains length, tail, ... head)
                                 .EQU SnakeL = 0x00
                                 .EQU SnakeH = 0x02
                                 
                                 ; Default information of snake: length, row,col, row,col ... (from tail to head)
                                 SnakeStart:
000297 0604
000298 0612
000299 0613
00029a 0614
00029b 0015                      .DB 4, 6,18, 6,19, 6,20, 6,21, 0
                                 
                                 ; Screen at game start, corresponding to values of SnakeStart (without walls)
                                 SnakeNoWalls:
                                 ;     1    2        3    4        5        6    7        8
00029c 0000
00029d 0000                      .DB 0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
00029e 0000
00029f 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002a0 0000
0002a1 0000
0002a2 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002a3 0000
0002a4 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002a5 0000
0002a6 0000
0002a7 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002a8 0000
0002a9 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002aa 0000
0002ab 0000
0002ac 003c                      	0b00000000, 0b00000000, 0b00111100, 0b00000000, 0b00000000, \
                                 																\
0002ad 0000
0002ae 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002af 0000
0002b0 0000
0002b1 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002b2 0000
0002b3 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002b4 0000
0002b5 0000
0002b6 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002b7 0000
0002b8 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002b9 0000
0002ba 0000
0002bb 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000, \
0002bc 0000
0002bd 0000
0002be 0000                      	0b00000000, 0b00000000, 0b00000000, 0b00000000, 0b00000000
                                 
                                 ; Screen at game start, corresponding to values of SnakeStart (with walls)
                                 SnakeWalls:
                                 ;     1    2        3    4        5        6    7        8
0002bf ffff
0002c0 ffff                      .DB 0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111, \
0002c1 80ff
0002c2 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002c3 0100
0002c4 0080
0002c5 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002c6 8001
0002c7 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002c8 0100
0002c9 0080
0002ca 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002cb 8001
0002cc 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002cd 0100
0002ce 0080
0002cf 003c                      	0b10000000, 0b00000000, 0b00111100, 0b00000000, 0b00000001, \
                                 																\
0002d0 8001
0002d1 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002d2 0100
0002d3 0080
0002d4 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002d5 8001
0002d6 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002d7 0100
0002d8 0080
0002d9 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002da 8001
0002db 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002dc 0100
0002dd 0080
0002de 0000                      	0b10000000, 0b00000000, 0b00000000, 0b00000000, 0b00000001, \
0002df ff01
0002e0 ffff
0002e1 ffff                      	0b11111111, 0b11111111, 0b11111111, 0b11111111, 0b11111111
                                 
                                 ; Screen when game start
                                 SnakeGameStart:
                                 ;     1    2        3    4        5        6    7        8
0002e2 dc01
0002e3 3867                      .DB 0b00000001, 0b11011100, 0b01100111, 0b00111000, 0b00000000, \
0002e4 0200
0002e5 9408                      	0b00000010, 0b00001000, 0b10010100, 0b10010000, 0b00000000, \
0002e6 0090
0002e7 0802
0002e8 9094                      	0b00000010, 0b00001000, 0b10010100, 0b10010000, 0b00000000, \
0002e9 0100
0002ea 9488                      	0b00000001, 0b10001000, 0b10010100, 0b10010000, 0b00000000, \
0002eb 0090
0002ec 4800
0002ed 10f7                      	0b00000000, 0b01001000, 0b11110111, 0b00010000, 0b00000000, \
0002ee 0000
0002ef 9448                      	0b00000000, 0b01001000, 0b10010100, 0b10010000, 0b00000000, \
0002f0 0090
0002f1 8803
0002f2 9094                      	0b00000011, 0b10001000, 0b10010100, 0b10010000, 0b00000000, \
                                 																\
0002f3 0000
0002f4 640c                      	0b00000000, 0b00001100, 0b01100100, 0b10111100, 0b00000000, \
0002f5 00bc
0002f6 1200
0002f7 a097                      	0b00000000, 0b00010010, 0b10010111, 0b10100000, 0b00000000, \
0002f8 0000
0002f9 9410                      	0b00000000, 0b00010000, 0b10010100, 0b10100000, 0b00000000, \
0002fa 00a0
0002fb 1600
0002fc bc94                      	0b00000000, 0b00010110, 0b10010100, 0b10111100, 0b00000000, \
0002fd 0000
0002fe f412                      	0b00000000, 0b00010010, 0b11110100, 0b10100000, 0b00000000, \
0002ff 00a0
000300 1200
000301 a094                      	0b00000000, 0b00010010, 0b10010100, 0b10100000, 0b00000000, \
000302 0000
000303 940c
000304 00bc                      	0b00000000, 0b00001100, 0b10010100, 0b10111100, 0b00000000
                                 
                                 ; Screen when game over
                                 SnakeGameOver:
                                 ;     1    2        3    4        5        6    7        8
000305 0c00
000306 bc64                      .DB 0b00000000, 0b00001100, 0b01100100, 0b10111100, 0b00000000, \
000307 0000
000308 9712                      	0b00000000, 0b00010010, 0b10010111, 0b10100000, 0b00000000, \
000309 00a0
00030a 1000
00030b a094                      	0b00000000, 0b00010000, 0b10010100, 0b10100000, 0b00000000, \
00030c 0000
00030d 9416                      	0b00000000, 0b00010110, 0b10010100, 0b10111100, 0b00000000, \
00030e 00bc
00030f 1200
000310 a0f4                      	0b00000000, 0b00010010, 0b11110100, 0b10100000, 0b00000000, \
000311 0000
000312 9412                      	0b00000000, 0b00010010, 0b10010100, 0b10100000, 0b00000000, \
000313 00a0
000314 0c00
000315 bc94                      	0b00000000, 0b00001100, 0b10010100, 0b10111100, 0b00000000, \
                                 																\
000316 0000
000317 971e                      	0b00000000, 0b00011110, 0b10010111, 0b10111000, 0b00000000, \
000318 00b8
000319 1200
00031a 2494                      	0b00000000, 0b00010010, 0b10010100, 0b00100100, 0b00000000, \
00031b 0000
00031c 9412                      	0b00000000, 0b00010010, 0b10010100, 0b00100100, 0b00000000, \
00031d 0024
00031e 1200
00031f a497                      	0b00000000, 0b00010010, 0b10010111, 0b10100100, 0b00000000, \
000320 0000
000321 9412                      	0b00000000, 0b00010010, 0b10010100, 0b00111000, 0b00000000, \
000322 0038
000323 1200
000324 2494                      	0b00000000, 0b00010010, 0b10010100, 0b00100100, 0b00000000, \
000325 0000
000326 671e
000327 00a4                      	0b00000000, 0b00011110, 0b01100111, 0b10100100, 0b00000000
                                 
                                 ; R0,R1 are used as subroutine output registers (used freely, interrupts need to save them)
                                 ; R2,R3 are used as subroutine input registers (used freely, interrupts need to save them)
                                 ; R16,R17,R18 are mostly used for temporary computations
                                 
                                 ; Keyboard definitions
                                 .DEF BtnNb = R19			; Define R19 as the pressed keyboard button
                                 
                                 ; Joystick definitions
                                 .DEF JoystickUD = R20		; Use R20 for the ADC converted value of the Joystick UP/DOWN
                                 .DEF JoystickLR = R21		; Use R21 for the ADC converted value of the Joystick LEFT/RIGHT
                                 
                                 ; #################################################################
                                 init:
                                 ; Configure output pins
000328 9820                      CBI DDRB,0					; Pin PB0 is an input
000329 9a28                      SBI PORTB,0					; Enable the pull-up resistor (Output HIGH -> switch LOW)
                                 
00032a dd46                      RCALL ScreenInit			; Screen initialization
00032b de4a                      RCALL SnakeInit				; Snake initialization
00032c d005                      RCALL TimersInit			; Timers initialization
00032d d035                      RCALL ADCInit				; ADC initialization
                                 
                                 ; #################################################################
                                 main:
00032e dd62                      RCALL Display				; Refresh screen
00032f dd25                      RCALL GetBtnNb				; Get button number in R0
000330 2d30                      MOV BtnNb,R0				; Load button number to BtnNb for others to use
                                 
000331 cffc                      RJMP main					; Repeat the whole loop
                                 
                                 
                                 
                                 
                                 
                                 
                                 
                                 ; ########################################################################################
                                 ; Timer(s) initialization
                                 ; Input(s): /
                                 ; Output(s): /
                                 TimersInit:
                                 ; Save register(s) to be used on the stack
000332 930f                      PUSH R16
                                 
                                 ; ####################
                                 ; Timer0 used for the random seed
000333 e003                      LDI R16,0b00000011
000334 bd05                      OUT TCCR0B,R16				; Init Timer0 with prescaler 64
000335 e000                      LDI R16,0
000336 bd06                      OUT TCNT0,R16				; Init Timer0 Counter to 0
                                 
                                 ; ####################
                                 ; Timer1
000337 e003                      LDI R16,0b00000011
000338 9300 0081                 STS TCCR1B,R16				; Init Timer1 with prescaler 64
                                 ; Start Counter at 34 286 (8 Hz)
00033a e805                      LDI R16,0x85
00033b 9300 0085                 STS TCNT1H,R16				; Init Timer1 Counter high byte
00033d ee0e                      LDI R16,0xEE
00033e 9300 0084                 STS TCNT1L,R16				; Init Timer1 Counter low byte
                                 
                                 ; ####################
000340 9478                      SEI							; Set Global Interrupt Enable bit
000341 e001                      LDI R16,0b00000001
000342 9300 006f                 STS TIMSK1,R16				; Set Timer1 Overflow Interrupt Enable bit
                                 
                                 ; Restore register(s) from the stack (reverse order)
000344 910f                      POP R16
000345 9508                      RET							; Return from subroutine
                                 
                                 ; ########################################################################################
                                 ; Execute the snake logic
                                 Timer1InterruptStart:
                                 ; Save register(s) to be used on the stack
000346 930f                      PUSH R16
000347 b70f                      IN R16,SREG					; Get Flag Status Register
000348 930f                      PUSH R16
000349 920f                      PUSH R0
00034a 921f                      PUSH R1
00034b 922f                      PUSH R2
00034c 923f                      PUSH R3
00034d 93cf                      PUSH YL
00034e 93df                      PUSH YH
                                 
00034f 2e23                      MOV R2,BtnNb				; Copy button number (input of SnakeMain)
000350 deea                      RCALL SnakeMain				; Execute snake logic
                                 
                                 ; Set Timer1 counter
000351 e0c0                      LDI YL,FoodL				; Load address of food in SRAM
000352 e0d3                      LDI YH,FoodH
000353 810a                      LDD R16,Y+2
000354 9300 0085                 STS TCNT1H,R16				; Init Timer1 Counter high byte
000356 810b                      LDD R16,Y+3
000357 9300 0084                 STS TCNT1L,R16				; Init Timer1 Counter low byte
                                 
                                 ; Restore register(s) from the stack (reverse order)
000359 91df                      POP YH
00035a 91cf                      POP YL
00035b 903f                      POP R3
00035c 902f                      POP R2
00035d 901f                      POP R1
00035e 900f                      POP R0
00035f 910f                      POP R16
000360 bf0f                      OUT SREG,R16
000361 910f                      POP R16
000362 9518                      RETI						; Return from interrupt
                                 
                                 ; ########################################################################################
                                 ; Initialize the ADC. Start convervion on ADC0
                                 ; Input(s): /
                                 ; Output(s): /
                                 ADCInit:
                                 ; Save register(s) to be used on the stack
000363 930f                      PUSH R16
                                 
000364 e600                      LDI R16,0b01100000			; Voltage reference AVCC, Left Adjust Result, ADC0 selection
000365 9300 007c                 STS ADMUX,R16
                                 
000367 9478                      SEI							; Set Global Interrupt Enable bit
000368 ec0f                      LDI R16,0b11001111			; ADC Enable, Start Conversion, Interrupt Enable, Prescaler 128
000369 9300 007a                 STS ADCSRA,R16
                                 
                                 ; Restore register(s) from the stack (reverse order)
00036b 910f                      POP R16
00036c 9508                      RET
                                 
                                 ; ########################################################################################
                                 ; Convert the values of the Joystick. Start a new conversion at the end of the interrupt
                                 ADCInterruptStart:
                                 ; Save register(s) to be used on the stack
00036d 930f                      PUSH R16
00036e b70f                      IN R16,SREG
00036f 930f                      PUSH R16
000370 931f                      PUSH R17
                                 
000371 9100 007c                 LDS R16,ADMUX				; Load ADC Multiplexer Selection Register
000373 fb00                      BST R16,0					; Store bit 0 of ADMUX in T flag
000374 f01e                      BRTS ADCInterruptP12		; If T flag set, ADC1
000375 9150 0079                 	LDS JoystickLR,ADCH			; Else ADC0, load 8 bits result (left adjusted) in JoystickLR
000377 c002                      	RJMP ADCInterruptP2			; Go to next part
                                 
                                 	ADCInterruptP12:
000378 9140 0079                 	LDS JoystickUD,ADCH			; ADC1, load 8 bits result (left adjusted) in JoystickUD
                                 
                                 ; Switch ADC input channel (between ADC0 and ADC1) and start conversion
                                 ADCInterruptP2:
00037a e011                      LDI R17,0b00000001			; Load bit 0 flipping mask
00037b 2701                      EOR R16,R17					; Flip bit 0 of ADMUX (switch between ADC0 and ADC1)
00037c 9300 007c                 STS ADMUX,R16				; Store back ADMUX
00037e e410                      LDI R17,0b01000000			; Load bit 6 setting mask
00037f 9100 007a                 LDS R16,ADCSRA				; Load ADC Control and Status Register A
000381 2b01                      OR R16,R17					; Set bit 6 of ADCSRA (Start Conversion bit)
000382 9300 007a                 STS ADCSRA,R16				; Store back ADCSRA
                                 
                                 ; Restore register(s) from the stack (reverse order)
000384 911f                      POP R17
000385 910f                      POP R16
000386 bf0f                      OUT SREG,R16
000387 910f                      POP R16


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega328P" register use summary:
x  :   0 y  :  40 z  :   5 r0 :  40 r1 :  13 r2 :  54 r3 :  41 r4 :   0 
r5 :   0 r6 :   0 r7 :   0 r8 :   0 r9 :   0 r10:   4 r11:   1 r12:   1 
r13:   1 r14:   1 r15:   3 r16: 216 r17:  36 r18:  11 r19:   2 r20:   3 
r21:   3 r22:   0 r23:   0 r24:  13 r25:   5 r26:   0 r27:   0 r28:  40 
r29:  37 r30:  10 r31:   9 
Registers used: 24 out of 35 (68.6%)

"ATmega328P" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   0 add   :   3 adiw  :   6 and   :   1 
andi  :   0 asr   :   0 bclr  :   0 bld   :   5 brbc  :   0 brbs  :   0 
brcc  :   0 brcs  :   0 break :   0 breq  :  16 brge  :   3 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   7 brlt  :   0 brmi  :   1 
brne  :  19 brpl  :   0 brsh  :   2 brtc  :   0 brts  :   1 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   4 call  :   0 cbi   :   9 cbr   :   0 
clc   :   1 clh   :   0 cli   :   0 cln   :   0 clr   :   3 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   6 cpc   :   0 
cpi   :  23 cpse  :   0 dec   :  19 eor   :   3 fmul  :   0 fmuls :   0 
fmulsu:   0 icall :   0 ijmp  :   0 in    :   3 inc   :   4 jmp   :   0 
ld    :  11 ldd   :   7 ldi   :  94 lds   :   4 lpm   :   6 lsl   :   3 
lsr   :   3 mov   :  49 movw  :   0 mul   :   1 muls  :   0 mulsu :   0 
neg   :   0 nop   :   0 or    :   2 ori   :   0 out   :   8 pop   :  83 
push  :  83 rcall :  47 ret   :  27 reti  :   2 rjmp  :  26 rol   :   2 
ror   :   5 sbc   :   0 sbci  :   0 sbi   :   9 sbic  :   1 sbis  :   8 
sbiw  :   1 sbr   :   0 sbrc  :   2 sbrs  :   1 sec   :   0 seh   :   0 
sei   :   2 sen   :   0 ser   :   0 ses   :   0 set   :   0 sev   :   0 
sez   :   0 sleep :   0 spm   :   0 st    :  15 std   :   3 sts   :  10 
sub   :   1 subi  :   2 swap  :   0 tst   :   7 wdr   :   0 
Instructions used: 53 out of 113 (46.9%)

"ATmega328P" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000712   1354    376   1730   32768   5.3%
[.dseg] 0x000100 0x000100      0      0      0    2048   0.0%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 0 warnings
